/* tslint:disable */
/* eslint-disable */
/**
 * dashboard-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: main-20240823173931
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DtsCollectionFilter,
  DtsCollectionVO,
  ErrorResponse,
} from '../models/index';
import {
    DtsCollectionFilterFromJSON,
    DtsCollectionFilterToJSON,
    DtsCollectionVOFromJSON,
    DtsCollectionVOToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface DtscCloneIdCloneIdPutRequest {
    cloneId: string;
    id: string;
}

export interface DtscGetIdGetRequest {
    id: string;
}

export interface DtscListPostRequest {
    dtsCollectionFilter?: DtsCollectionFilter;
}

export interface DtscSavePostRequest {
    dtsCollectionVO?: DtsCollectionVO;
}

/**
 * 
 */
export class DtsCollectionResourceApi extends runtime.BaseAPI {

    /**
     * Clone and return a Dts Collection
     * Clone and return a Dts Collection
     */
    async dtscCloneIdCloneIdPutRaw(requestParameters: DtscCloneIdCloneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtsCollectionVO>> {
        if (requestParameters['cloneId'] == null) {
            throw new runtime.RequiredError(
                'cloneId',
                'Required parameter "cloneId" was null or undefined when calling dtscCloneIdCloneIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dtscCloneIdCloneIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dtsc/clone/{id}/{cloneId}`.replace(`{${"cloneId"}}`, encodeURIComponent(String(requestParameters['cloneId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtsCollectionVOFromJSON(jsonValue));
    }

    /**
     * Clone and return a Dts Collection
     * Clone and return a Dts Collection
     */
    async dtscCloneIdCloneIdPut(requestParameters: DtscCloneIdCloneIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtsCollectionVO> {
        const response = await this.dtscCloneIdCloneIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a Dts Collection
     * Get a Dts Collection
     */
    async dtscGetIdGetRaw(requestParameters: DtscGetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DtsCollectionVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dtscGetIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dtsc/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DtsCollectionVOFromJSON(jsonValue));
    }

    /**
     * Get a Dts Collection
     * Get a Dts Collection
     */
    async dtscGetIdGet(requestParameters: DtscGetIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DtsCollectionVO> {
        const response = await this.dtscGetIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Dts Collections
     * List Dts Collections
     */
    async dtscListPostRaw(requestParameters: DtscListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DtsCollectionVO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dtsc/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtsCollectionFilterToJSON(requestParameters['dtsCollectionFilter']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DtsCollectionVOFromJSON));
    }

    /**
     * List Dts Collections
     * List Dts Collections
     */
    async dtscListPost(requestParameters: DtscListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DtsCollectionVO>> {
        const response = await this.dtscListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update a Dts Collection
     * Create or update a Dts Collection
     */
    async dtscSavePostRaw(requestParameters: DtscSavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dtsc/save`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DtsCollectionVOToJSON(requestParameters['dtsCollectionVO']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update a Dts Collection
     * Create or update a Dts Collection
     */
    async dtscSavePost(requestParameters: DtscSavePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dtscSavePostRaw(requestParameters, initOverrides);
    }

}
